<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--描述了这个项目构建环境中的前提条件。-->
    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
        这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
    <modelVersion>4.0.0</modelVersion>
    <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成，
        如com.company.app生成的相对路径为：/com/company/app-->
    <groupId>com.ssky.git.cn</groupId>
    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；
        在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。-->
    <artifactId>ssky-small-micro</artifactId>
    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
    <version>1.0-SNAPSHOT</version>
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型
        Jar、war、EAR、在文件结构上，三者并没有什么不同，它们都采用zip或jar档案文件压缩格式。但是它们的使用目的有所区别：
        1.Jar文件（扩展名为. Jar，Java Application Archive）包含Java类的普通库、资源（resources）、辅助文件（auxiliary files）等.
        2.War文件（扩展名为.War,Web Application Archive）包含全部Web应用程序。在这种情形下，一个Web应用程序被定义为单独的一组文件、类和资源，
        用户可以对jar文件进行封装，并把它作为小型服务程序（servlet）来访问。
        3.Ear文件（扩展名为.Ear,Enterprise Application Archive）包含全部企业应用程序。在这种情形下，
        一个企业应用程序被定义为多个jar文件、资源、类和Web应用程序的集合。
        4.Pom 打出来可以作为其他项目的maven依赖，在工程A中添加工程B的pom，A就可以使用B中的类。用在父级工程或聚合工程中。用来做jar包的版本控制。
        -->
    <packaging>pom</packaging>
    <!--项目的名称, Maven产生的文档用-->
    <name>microservice-aggregator</name>
    <!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签），
        不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。-->
    <description>This is a micro server test project</description>
    <!--项目主页的URL, Maven产生的文档用-->
    <url>http://www.ssky.git/smll</url>

    <!-- 配置文件，定义变量，管理jar版本 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Dalston.SR4</spring-cloud.version>
        <csc-version>0.0.1-SNAPSHOT</csc-version>
    </properties>

    <!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->
    <parent>
        <!--被继承的父项目的全球唯一标识符-->
        <groupId>org.springframework.boot</groupId>
        <!--被继承的父项目的构件标识符-->
        <!--spring cloud依赖管理器-->
        <artifactId>spring-boot-starter-parent</artifactId>
        <!--被继承的父项目的版本-->
        <version>1.5.8.RELEASE</version>
        <!--父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，
            其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。-->
        <relativePath/>
    </parent>

    <!--继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），
        如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <!--依赖的group ID-->
                <groupId>org.springframework.cloud</groupId>
                <!--依赖的artifact ID-->
                <artifactId>spring-cloud-dependencies</artifactId>
                <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。-->
                <version>${spring-cloud.version}</version>
                <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。
                    类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，
                    就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。-->
                <type>pom</type>
                <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
                    - compile ：默认范围，用于编译
                    - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
                    - runtime: 在执行时需要使用
                    - test:    用于test任务时使用
                    - system: 需要外在提供相应的元素。通过systemPath来取得
                    - systemPath: 仅用于范围为system。提供相应的路径
                    - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用
                    - import: 实现多继承 -->
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->
    <dependencies>
        <!--提供常用基础的、通用的操作和处理
            1.字符串的处理类（StringUtils)
            2.随机数生成类（RandomStringUtils）
            3.数字类NumberUtils
            4.数组类 ArrayUtils
            5.日期类DateUtils
            -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>

        <!--Commons Logging是由Apache创建的日志模块。它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统。
            默认情况下，Commons Logging自动搜索并使用Log4j（Log4j是另一个流行的日志系统），如果没有找到Log4j，再使用JDK Logging。
            1.通过LogFactory获取Log类的实例；
            2.使用Log实例的方法打日志。
            import org.apache.commons.logging.Log;
            import org.apache.commons.logging.LogFactory;
            Log log = LogFactory.getLog(Main.class);
            log.info("start...");
            log.warn("end.");
        -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!--slf4j规定了一堆实现了日志的接口，并不关心日志怎么实现，这样就可以让项目脱离对日志框架的依赖。 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.25</version>
        </dependency>
    </dependencies>

    <modules>
        <module></module>
        <module>ssky-small-micro-config-server</module>
    </modules>
</project>